// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package comms is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	NameMessage
	WhisperMessage
*/
package comms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NameMessage struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *NameMessage) Reset()                    { *m = NameMessage{} }
func (m *NameMessage) String() string            { return proto.CompactTextString(m) }
func (*NameMessage) ProtoMessage()               {}
func (*NameMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NameMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type WhisperMessage struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Body   string `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *WhisperMessage) Reset()                    { *m = WhisperMessage{} }
func (m *WhisperMessage) String() string            { return proto.CompactTextString(m) }
func (*WhisperMessage) ProtoMessage()               {}
func (*WhisperMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WhisperMessage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *WhisperMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*NameMessage)(nil), "comms.NameMessage")
	proto.RegisterType((*WhisperMessage)(nil), "comms.WhisperMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Name service

type NameClient interface {
	SayName(ctx context.Context, in *NameMessage, opts ...grpc.CallOption) (*NameMessage, error)
}

type nameClient struct {
	cc *grpc.ClientConn
}

func NewNameClient(cc *grpc.ClientConn) NameClient {
	return &nameClient{cc}
}

func (c *nameClient) SayName(ctx context.Context, in *NameMessage, opts ...grpc.CallOption) (*NameMessage, error) {
	out := new(NameMessage)
	err := grpc.Invoke(ctx, "/comms.Name/SayName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Name service

type NameServer interface {
	SayName(context.Context, *NameMessage) (*NameMessage, error)
}

func RegisterNameServer(s *grpc.Server, srv NameServer) {
	s.RegisterService(&_Name_serviceDesc, srv)
}

func _Name_SayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServer).SayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comms.Name/SayName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServer).SayName(ctx, req.(*NameMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Name_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comms.Name",
	HandlerType: (*NameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayName",
			Handler:    _Name_SayName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Client API for Whisper service

type WhisperClient interface {
	SendWhisper(ctx context.Context, in *WhisperMessage, opts ...grpc.CallOption) (*WhisperMessage, error)
}

type whisperClient struct {
	cc *grpc.ClientConn
}

func NewWhisperClient(cc *grpc.ClientConn) WhisperClient {
	return &whisperClient{cc}
}

func (c *whisperClient) SendWhisper(ctx context.Context, in *WhisperMessage, opts ...grpc.CallOption) (*WhisperMessage, error) {
	out := new(WhisperMessage)
	err := grpc.Invoke(ctx, "/comms.Whisper/SendWhisper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Whisper service

type WhisperServer interface {
	SendWhisper(context.Context, *WhisperMessage) (*WhisperMessage, error)
}

func RegisterWhisperServer(s *grpc.Server, srv WhisperServer) {
	s.RegisterService(&_Whisper_serviceDesc, srv)
}

func _Whisper_SendWhisper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhisperMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhisperServer).SendWhisper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comms.Whisper/SendWhisper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhisperServer).SendWhisper(ctx, req.(*WhisperMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Whisper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comms.Whisper",
	HandlerType: (*WhisperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendWhisper",
			Handler:    _Whisper_SendWhisper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0xce, 0xcf, 0xcd, 0x2d,
	0x56, 0x52, 0xe4, 0xe2, 0xf6, 0x4b, 0xcc, 0x4d, 0xf5, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15,
	0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3,
	0x95, 0x6c, 0xb8, 0xf8, 0xc2, 0x33, 0x32, 0x8b, 0x0b, 0x52, 0x8b, 0x60, 0xaa, 0xc4, 0xb8, 0xd8,
	0x8a, 0xf3, 0x4b, 0x8b, 0x92, 0x61, 0xea, 0xa0, 0x3c, 0x90, 0xee, 0xa4, 0xfc, 0x94, 0x4a, 0x09,
	0x26, 0x88, 0x6e, 0x10, 0xdb, 0xc8, 0x9a, 0x8b, 0x05, 0x64, 0x81, 0x90, 0x31, 0x17, 0x7b, 0x70,
	0x62, 0x25, 0x98, 0x29, 0xa4, 0x07, 0xb6, 0x5b, 0x0f, 0xc9, 0x62, 0x29, 0x2c, 0x62, 0x4a, 0x0c,
	0x46, 0x1e, 0x5c, 0xec, 0x50, 0xab, 0x85, 0x6c, 0xb9, 0xb8, 0x83, 0x53, 0xf3, 0x52, 0x60, 0x5c,
	0x51, 0xa8, 0x7a, 0x54, 0x97, 0x49, 0x61, 0x17, 0x56, 0x62, 0x48, 0x62, 0x03, 0xfb, 0xda, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xd9, 0xfb, 0xf9, 0x06, 0x01, 0x00, 0x00,
}
